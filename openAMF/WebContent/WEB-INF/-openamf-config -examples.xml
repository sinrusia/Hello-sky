<?xml version="1.0" encoding="UTF-8"?>
<config>

	<!--
	Configure behavior of outgoing AMF messages:
	forceLowerCaseKeys - if true, the hash maps used to return custom classes
	will convert all keys to lower case; 
	set this to:
		true if you're using ActionScript 1.0 on the client,
		false if you're using ActionScript 2.0 (which is case-sensitive)
	-->
	<amf-serializer>
			<force-lower-case-keys>false</force-lower-case-keys>
	</amf-serializer>
       
	<!-- Required for DefaultGateway-->
	<invoker>
		<name>PageableRecordSet</name>
		<class>org.openamf.invoker.PageableResultSetServiceInvoker</class>
	</invoker>
	<invoker>
		<name>SessionControl</name>
		<class>org.openamf.invoker.SessionControlInvoker</class>
	</invoker>
	<invoker>
		<name>WebService</name>
		<class>org.openamf.invoker.WebServiceInvoker</class>
	</invoker>
	<invoker>
		<name>JMX</name>
		<class>org.openamf.invoker.JMXServiceInvoker</class>
	</invoker>
	
	<!-- Uncomment this to enable EJB invoker
	<invoker>
		<name>EJB</name>
		<class>org.openamf.invoker.EJBServiceInvoker</class>
	</invoker>
	-->
	
	<invoker>
		<name>Java</name>
		<class>org.openamf.invoker.JavaServiceInvoker</class>
	</invoker>
	<pageable-recordset>
		<initial-data-row-count>20</initial-data-row-count>
	</pageable-recordset>
	<!-- 
	Example Custom Class to Java Class mapping
	
	When a class of type org.openamf.examples.Person is Serialized
	it will be registered to Person in flash 
	
	When a custom class of Person is Deserialized it
	will be translated to an org.openamf.examples.Person
		-->
	<custom-class-mapping>
		<java-class>org.openamf.examples.Person</java-class>
		<custom-class>org.openamf.examples.Person</custom-class>
	</custom-class-mapping>
		<custom-class-mapping>
		<java-class>org.openamf.test.Bar</java-class>
		<custom-class>Bar</custom-class>
	</custom-class-mapping>
	<custom-class-mapping>
		<java-class>org.openamf.test.Foo</java-class>
		<custom-class>Foo</custom-class>
	</custom-class-mapping>

	<!-- Required  for AdvancedGateway -->
	<!-- 
		This allows you to declare infomation about your services,
		instead of having the DefaultGateway guess 
	-->
	<service>
		<name>SessionControlService</name>
		<invoker-ref>SessionControl</invoker-ref>
		<method>
			<name>close</name>
			<parameter>
				<type>*</type>
			</parameter>
		</method>
	</service>
	<service>
		<name>OpenAMFPageableRecordSet</name>
		<invoker-ref>PageableRecordSet</invoker-ref>
		<method>
			<name>*</name>
			<parameter>
				<type>*</type>
			</parameter>
		</method>
	</service>
	<service>
		<name>Directory</name>
		<service-location>org.openamf.examples.Directory</service-location>
		<invoker-ref>Java</invoker-ref>
		<method>
			<!-- Operation's are matched by the name and parameters -->
			<name>addPerson</name>
			<state-bean-ref>
				<name>Authentication</name>
			</state-bean-ref>
			<parameter>
				<!-- 
					type can be the the name of the class, 
					a * for any types,
					or a ? any 1 type
				-->
				<type>*</type>
			</parameter>
		</method>
		<method>
			<!-- Operation's are matched by the name and parameters -->
			<name>getPeople</name>
			<state-bean-ref>
				<name>Authentication</name>
			</state-bean-ref>
			<parameter>
				<!-- 
					type can be the the name of the class, 
					a * for any types,
					or a ? any 1 type
                                                                      
					 So in this instance on the Flash side we will call this 
					method in two ways one with a string getPerson("Bob")
					when the "Get By Name" is clicked
					and one with getPerson(92041) for when the "Get By Zip" 
					button is clicked.
					On the Java Directory.java/class there are two methods
					one that is getPerson(zip:int) the other getPerson
					(name:String), this filters/routes them to the correct one.
				-->
				<type>*</type>
			</parameter>
			<!-- This result-filter instructs OpenAMF to ignore the Person.extraInfo
			List. which being an array of indefinate size
			could concievably be quite large.
			Filters are useful for saving on bandwidth
			and eliminating data that isn't ever shown.
			See the open AMF docs for more information.		
			http://www.openamf.org/javadocs/org/openamf/filter/class-use/ResultFilter.html
			 -->
			<result-filter>
				<class>org.openamf.filter.BeanListToRecordSet</class>
				<parameter>
					<name>ignore</name>
					<value>extraInfo</value>
				</parameter>
			</result-filter>
		</method>
	</service>
	<service>
		<name>TestDataTypesService</name>
		<service-location>org.openamf.test.TestDataTypesService</service-location>
		<invoker-ref>Java</invoker-ref>
		<method>
			<!-- Operation's are matched by the name and parameters -->
			<name>getTestData</name>
			<parameter>
				<!-- 
					type can be the the name of the class, 
					a * for any types,
					or a ? any 1 type
				-->
				<type>*</type>
			</parameter>
		</method>
	</service>
	<service>
		<name>Java2AS</name>
		<service-location>org.openamf.examples.Java2AS</service-location>
		<invoker-ref>Java</invoker-ref>
		<method>
			<!-- Operation's are matched by the name and parameters -->
			<name>generateAS</name>
			<parameter>
				<!-- 
					type can be the the name of the class, 
					a * for any types,
					or a ? any 1 type
				-->
				<type>*</type>
			</parameter>
		</method>
	</service>
	<state-bean>
		<name>Authentication</name>
		<class>org.openamf.examples.Authentication</class>
		<scope>session</scope>
	</state-bean>
</config>

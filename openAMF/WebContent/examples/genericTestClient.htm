<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>genericTestClient</title>
</head>
<body bgcolor="#ffffff">
<!--url's used in the movie-->
<!--text used in the movie-->
<!--
Generic Remoting Test Client (www.openamf.org)
SUBMIT

Output:

Hello World

Preset1

RecieveTest

SendTest

Enter the values for the gateway service and method in the boxes below, and hit submit


gateway URL
Service Name
Service  Method
Gateway URL:

Service Name:

Service Method:

Argument  Method
Arguments:
Java2AS Util

the URL to the openamf gateway servlet, e.g. http://localhost:8080/opeamf/gateway

the spring bean ID or Java class name 

the method to call on the above class/service

a comma delimited list of arguments, that are cast to type
if blank sends no arguments

-->
<p>
  <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7,0,0,0" width="936" height="810" id="genericTestClient" align="middle">
    <param name="allowScriptAccess" value="sameDomain" />
    <param name="movie" value="genericTestClient.swf" />
    <param name="quality" value="high" />
    <param name="bgcolor" value="#ffffff" />
    <embed src="genericTestClient.swf" quality="high" bgcolor="#ffffff" width="936" height="810" name="genericTestClient" align="middle" allowScriptAccess="sameDomain" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" />
  </object>
</p>
<p>&nbsp;</p>
<div id="idOWAReplyText54656" dir="ltr">
  <div dir="ltr">
    <div dir="ltr">
      <h1>The Generic Remoting Test Client </h1>
      <p><font color="#000000" size="2" face="Arial">This helps test remoting services. It's used primarily for team development where there is a sharp break between actionscripter and java programmers, where java engineers are responsible for setting up the remoting services. The utility allows pinging the gateway and remoting service (if it's used with the java or spring invoker), passing it a  number or basically typed arguments, to make sure it up before handing off to a actionscript programmer to create full fledged Actionscript and flash clients. This alleviates the dependency on having to have a Java engineer know or have flash for initial testing of the gateway and related services. This also allows sharing of the information (e.g. sending a screenshot of the parameters and results) between the team members. </font></p>
      <p>&nbsp;</p>
    </div>
  </div>
</div>
<div id="idOWAReplyText54656" dir="ltr">
  <div dir="ltr">
    <div dir="ltr">
      <h1>The Java2AS Utility (included)</h1>
      <p><font color="#000000" size="2" face="Arial">The Java2AS utility helps speed creation of AS bean ( data centric business classes ) classes from Java ones. Especially initialiy in development, since the java is on a central server and changes requently, it's hard for actionscripters who don't run java to connect remotely and build the beans using a local executable version of the Java code. It is not a complete Java to Actionscript converstion utility, it doesn't introspect inside methods, this should always be done by hand. </font></p>
      <p><font color="#000000" size="2" face="Arial"><strong>Supports</strong></font></p>
    </div>
    <ul dir="ltr">
      <li>
        <div><font color="#000000" size="2" face="Arial"> creates getters and setters as provided by JavaBean style introspection</font></div>
      </li>
      <li>
        <div><font color="#000000" size="2" face="Arial">adds an no argument constructor</font></div>
      </li>
      <li>
        <div><font color="#000000" size="2" face="Arial">rudimentary toString() that outputs type.&nbsp;</font></div>
      </li>
      <li>
        <div><font color="#000000" size="2" face="Arial">a nifty initSampleData method which can be called to prepopulate the ActionScript object with sample data with basic types for initial testing, these methods&nbsp;should be removed for primetime..</font></div>
      </li>
    </ul>
    <div dir="ltr"><font color="#000000" size="2" face="Arial">&nbsp;&nbsp;<strong>Usage:</strong>&nbsp;</font></div>
    <ol dir="ltr">
      <li>
        <div><font color="#000000" size="2" face="Arial">Open up the genericTestClient (also available in .exe) and click on Java2AS button</font></div>
      </li>
      <li>
        <div><font color="#000000" size="2" face="Arial">enter the fully qualified name of the class in the classname field. e.g. org.openamf.examples.Person</font></div>
      </li>
      <li>
        <div><font color="#000000" size="2" face="Arial">click the&nbsp;'submit' button.</font></div>
      </li>
      <li>
        <div><font color="#000000" size="2" face="Arial">cut and paste the resulting text below	&quot;	&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; openamf-config.xml &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; :&quot; into the openamf-config.xml as file.</font></div>
      </li>
      <li>
        <div><font color="#000000" size="2" face="Arial">cut and paste the resulting text below &quot; &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; *.as source &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; :&quot; into a new as file.</font></div>
      </li>
      <li>
        <div><font color="#000000" size="2" face="Arial">take out the status messages at the top.</font></div>
      </li>
      <li>
        <div><font color="#000000" size="2" face="Arial">save and test.</font></div>
      </li>
    </ol>
    <div dir="ltr"><font color="#000000" size="2" face="Arial">&nbsp;<strong>Caveats:</strong></font></div>
    <ul dir="ltr">
      <li>
        <div><font color="#000000" size="2" face="Arial">It only creates the java bean accessible properties not all methods.</font></div>
      </li>
      <li><font color="#000000" size="2" face="Arial">types get returned back as full types (e.g. "<font 
face="Courier New">org.apache.commons.logging.Log</font>" &nbsp;instead of <font 
face="Courier New">Object</font>, even if there's no AS equivalent. Should allow easy search and replace or remove.</font></li>
      <li>
          <font color="#000000" size="2" face="Arial">It doesn't support inheritance particularly well. It flattens the heirarchy, so all properties inherited from ParentClass(s) show up in the Child.</font></li>
        
      <li>    <font face="Arial" size="2">Outputs parent and interfaces as comments (for at least documentation purposes) </font>
        <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
              <p><font face="Courier New" size="2">//extends com.schematic.BaseObject </font></p>
                <p><font face="Courier New" size="2">//implements com.schematic.AccountInterface</font></p>
                <p><font face="Courier New" size="2">class&nbsp; com.schematic.AccountImplementer {</font></p>
            </blockquote>
        </blockquote>
      </li>
    </ul>
  </div>
</div>
<div dir="ltr"><font face="Arial" size="2"><font face="Arial" size="2"><strong>&nbsp;Future Enhancements:</strong> </font></font></div>
<ul>
  <li><font size="2" face="Arial, Helvetica, sans-serif"> make the presets store whatever is typed into the fields and save them in a shared local object, so things don't have to be typed in all the time, and will persist past client restarts.</font></li>
</ul>
<p>&nbsp;</p>
<h2>Installation</h2>
<p><font face="Arial" size="2">This only works in the openamf with examples distribution, and this needs to be added to openamf-config.xml for the java2As to work.</font></p>
<p><font face="Arial" 
size="2">&nbsp;&lt;service&gt;<br />
&nbsp;&nbsp;&lt;name&gt;Java2AS&lt;/name&gt;<br />
&nbsp;&nbsp;&lt;service-location&gt;org.openamf.examples.Java2AS&lt;/service-location&gt;<br />
&nbsp;&nbsp;&lt;invoker-ref&gt;Java&lt;/invoker-ref&gt;<br />
&nbsp;&nbsp;&lt;method&gt;<br />
&nbsp;&nbsp;&nbsp;&lt;!-- Operation's are matched by the name and parameters --&gt;<br />
&nbsp;&nbsp;&nbsp;&lt;name&gt;generateAS&lt;/name&gt;<br />
&nbsp;&nbsp;&nbsp;&lt;parameter&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&lt;type&gt;*&lt;/type&gt;<br />
&nbsp;&nbsp;&nbsp;&lt;/parameter&gt;<br />
&nbsp;&nbsp;&lt;/method&gt;<br />
&nbsp;&lt;/service&gt;</font></p>
<p>&nbsp;</p>
</body>
</html>

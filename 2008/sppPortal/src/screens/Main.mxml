<?xml version="1.0" encoding="utf-8"?>
<!--
/////////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2004-2008 WeMB INC. 
// All Rights Reserved.
//
//  Main.mxml
//
//	@date			:	
//	@auther		 	:	wemb
//	@ver			:	
//	@description 	:	
//	
//	information : 
//	
//
/////////////////////////////////////////////////////////////////////////////////////////////
-->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:components="com.wemb.tobit.components.*" 
	xmlns:menu="com.wemb.tobit.components.menu.*"
	width="100%" height="100%" 
	creationComplete="initPage()" 
	xmlns:view="com.wemb.tobit.view.*">
	
	<!--
	* Copyright (C) 2004-2009 WeMB INC. 
	* All Rights Reserved.
	*	@date			:	2009-03-30
	*	@auther			:	고재학
	*	@ver			:	1.0
	*	@description 	: 	각 페이지들의 컨테이너이다.
	*
	-->
	
	<mx:Script>
		<![CDATA[
		
			import mx.managers.PopUpManager;
			import mx.core.Application;
			import screens.commonComp.AllLoading;
			import com.wemb.tobit.pure.Constants;
			import com.wemb.tobit.vo.PageInfo;
			import com.wemb.tobit.core.ApplicationConfig;
			import com.wemb.tobit.vo.UserInfo;
			import com.wemb.tobit.pure.view.MainMediator;
			import com.wemb.tobit.pure.ApplicationFacade;
			import org.puremvc.as3.interfaces.IFacade;
			import mx.events.ModuleEvent;
			import mx.core.UIComponent;
			
			//--------------------------------------------------------
			//
			// Variables
			//
			//--------------------------------------------------------

			
			// ApplicationFacade Instance
			private var facade:IFacade = ApplicationFacade.getInstance();
			
			public var loading:AllLoading;
			
			
			//--------------------------------------------------------
			//
			// Functions
			//
			//--------------------------------------------------------
			/**
			 * init MainMediator
			 */
			private function initPage():void
			{
				
				//어플리케이션 초기 환경정보 로딩.
				loading = AllLoading(PopUpManager.createPopUp(Application.application as DisplayObject, AllLoading, false));
				loading.x = (Application.application.width - loading.width) / 2; 
				loading.y = 70;
				loading.visible = false;				
				facade.registerMediator( new MainMediator(this) );	
				
					
			}
			
			/**
			 * 메인화면 로딩시 Index.mxml페이지에서 자동으로 호출하는 함수입니다.
			 * 다음과 같은초기화 작업을 수행합니다.
			 * 1. 사용자 메뉴 구성
			 * 2. 사용자 기본 페이지 로딩
			 * 3. TickList 조회
			 * 4. Background Image 적용
			 * 
			 */
			public function start():void
			{
				var config:ApplicationConfig = ApplicationConfig.getInstance();
				var userinfo:UserInfo = config.userInfo; 
				// 사용자 메뉴를 구성하기 위해 사용자 정보에서 설정된 메뉴 정보를 가져와서 처리하도록 한다.
				//header.menuList = config.getMainMenuList();				
				
				
				// 다음은 초기 페이지를 로딩하는 프로세스로서 초기화 페이지가 설정되어 있다면 해당 페이지를 로딩하고
				// 초기화 페이지가 설정 되어있지 않다면 접근 가능한 페이지 중 첫번째 페이지를 로딩하도록 한다.
				// 권한이 없을 경우 권한 없는 녀석의 초기페이지가 로딩이 되므로 권한이 없을일이 없음
				var groupId:String = userinfo.userInitPage;
				var pageID:String = userinfo.menuPageClass;
				var pageType:String = userinfo.pageType;
				var menuName:String = userinfo.menuName;
				pageChange(groupId, pageID, pageType, menuName);
				
				//화면 상단에 보여질 Ticker리스트를 조회하도록 한다.
				
				/**
				 * @TODO
				 * 각 각의 환경 설정 변수를 받아 처리하는 것이 필요.
				 * 전역변수에 각 값을 담아 Boolean 값으로 셋팅 해놓고 각 페이지에서 전역변수 값을 받아 처리토록 변경.
				 * ***/
				//var ticker:String = ApplicationConfig.getInstance().getAttribute("TICKER") as String;
				
				//if(ticker == "TICKER"){
					getTickerList();
				//}
				
				//Ticker보이기
				//header.viewTicker();
			}
			
			public function viewChange(toTarget:UIComponent, initInfo:Object = null):void
			{
				
				//현재 보여지는 페이지의 참조를 가져오도록 한다.
				var fromTarget:UIComponent = mainCanvas.getChildAt(mainCanvas.numChildren - 1) as UIComponent;
				
				// 감춰질페이지 새로운 페이지가 같지 않으면 페이지 전환 작업을 수행한다.
				if( toTarget != fromTarget )
				{
					// 감춰지는 페이지가 XCanvas일경우 Mediator을 삭제하도록 한다.
					if( fromTarget != null && fromTarget.hasOwnProperty("removeMediator") )
					{
						var removeFunc:Function = fromTarget["removeMediator"];
						removeFunc.call(fromTarget);
					}
					
					// 보여지는 페이지가 XCanvas일경우 Mediator을 등록하도록 한다.
					if( toTarget != null && toTarget.hasOwnProperty("registerMediator") )
					{
						var registerFunc:Function =  toTarget["registerMediator"];
						registerFunc.call(toTarget, initInfo);
					}
					
					// 페이지 visible 설정
					// fromTarget 감추기
					// toTarget 보이기
					fromTarget.visible = false;
					toTarget.visible = true;
					
					//각 페이지의 인덱스 값을 설정하도록 한다.
					mainCanvas.setChildIndex(toTarget as DisplayObject, mainCanvas.numChildren - 1);
				}
				else
				{
					// 감춰지는 페이지가 XCanvas일경우 Mediator을 삭제하도록 한다.
					if( fromTarget != null && fromTarget.hasOwnProperty("removeMediator") )
					{
						var removeFunc:Function = fromTarget["removeMediator"];
						removeFunc.call(fromTarget);
					}
					
					// 보여지는 페이지가 XCanvas일경우 Mediator을 등록하도록 한다.
					if( toTarget != null && toTarget.hasOwnProperty("registerMediator") )
					{
						var registerFunc:Function =  toTarget["registerMediator"];
						registerFunc.call(toTarget, initInfo);
					}
				}
			}
			
			/**
			 * 메인화면 이동 처리
			 * 버튼 이동으로 사용하지 않는 메소드...
			 * */
			private function pageChange(groupId:String, pageID:String, pageType:String, menuName:String = "", initInfo:Object = null):void
			{
				var info:PageInfo	= new PageInfo();
				info.url			= pageID;
				info.groupId		= groupId;
				info.pageType		= pageType;
				info.menuName		= menuName;
				info.initInfo		= initInfo;
				facade.sendNotification(Constants.PAGE_CHANGE, info);
			}
			
			/**
			 * 메인페이지(모듈)의 로딩 이벤트 핸들러
			 * 
			 */
			private function loadingProc(event:ModuleEvent):void
			{
				
			}
			
			public function logoutProc():void
			{
				//현재 보여지는 페이지의 참조를 가져오도록 한다.
				var fromTarget:DisplayObject = mainCanvas.getChildAt(mainCanvas.numChildren - 1);
				
				// 감춰지는 페이지가 XCanvas일경우 Mediator을 삭제하도록 한다.
				if( fromTarget != null && fromTarget.hasOwnProperty("removeMediator") )
				{
					var removeFunc:Function = fromTarget["removeMediator"];
					removeFunc.call(fromTarget);
				}
				
				fromTarget.visible = false;
				
				
				//각 페이지의 인덱스 값을 설정하도록 한다.
				mainCanvas.setChildIndex(contentStage, mainCanvas.numChildren - 1);
			}
			
			
			/**
			 * 티커 조회
			 * */
			 
			public function getTickerList():void
			{
				facade.sendTobitService( Constants.GET_TICKER_LIST );
			}
			 
		]]>
	</mx:Script>
	<!--
	//1280-24-24 : 1232
	//1024-30-69 : 925
	-->
	<mx:Canvas id="MainLayer" width="100%" height="100%" styleName="mainpage" >
		<!--
		<components:MainHeader id="header" width="100%" height="64" userId="{UserInfo.getInstance().user_id}"/>
		-->
		<mx:VBox width="100%" height="100%" y="64" 
			paddingLeft="0" paddingRight="0" paddingBottom="0" paddingTop="0">
			<view:CustomModuleLoader id="mainCanvas" width="100%" height="100%" 
				verticalScrollPolicy="off" horizontalScrollPolicy="off" 
				>
			</view:CustomModuleLoader>		
		</mx:VBox>

		<mx:Box width="100%" paddingLeft="10" paddingRight="10" paddingBottom="10" paddingTop="70" >
			<mx:Canvas id="contentStage" width="100%" height="100%" 
				verticalScrollPolicy="off" horizontalScrollPolicy="off"/>
		</mx:Box>
		
	</mx:Canvas>
	<mx:Canvas id="img"  />
</mx:Canvas>

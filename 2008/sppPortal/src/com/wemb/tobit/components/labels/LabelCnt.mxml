<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	implements="mx.controls.listClasses.IDropInListItemRenderer"
	horizontalScrollPolicy="off" verticalScrollPolicy="off">
	
	<mx:Script>
		<![CDATA[
			import gs.*; 
			import gs.easing.*;
			import mx.controls.listClasses.BaseListData;
			
			//-------------------------------------------------------
			//
			// Variables
			//
			//-------------------------------------------------------
			
			[Bindable]
			public var style:String;
			
			[Bindable]
			public var precision:Number = 0;

			private var cnt_arr:Array = [0];

			private var _nowValue:Number;
			
			private var _unitVisible:Boolean;
			
			private var _unit:String = "%";
			
			private var unitVisibleChanged:Boolean;
			
			private var unitChanged:Boolean;
			
			private var _color:Number;
			
			private var colorChanged:Boolean;
			
			private var _listData:BaseListData;
			
			//-------------------------------------------------------
			//
			// Override
			//
			//-------------------------------------------------------
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if( unitChanged )
				{
					unitChanged = false;
					
					tween();
				}
				
				if( unitVisibleChanged )
				{
					unitVisibleChanged = false;
					
					tween();
				}
				
				if( colorChanged )
				{
					colorChanged = false;
					
					txt.setStyle( "color", color );
				}
			}
			
			//-------------------------------------------------------
			//
			// Functions
			//
			//-------------------------------------------------------
			private function tween():void
			{
				TweenLite.to(cnt_arr, 2, {endArray:[_nowValue], onUpdate:onUpdateFunc });
			}
			
			private function onUpdateFunc():void
			{
				try
				{
					txt.text = nFmt.format(cnt_arr[0]);
					
					if( unitVisible )	txt.text += unit;
				}
				catch(error:Error)
				{
					trace( "onUpdateFunc: ", error.message );
					txt.text = "";
				}
			}
			
			//-------------------------------------------------------
			//
			// Setter / Getter
			//
			//-------------------------------------------------------
			
			public function set nowValue(val:Number):void
			{
				trace(this, "=====", val);
				_nowValue = val;
				var arr:Array = String(_nowValue).split(".");
				
				/*
				if(String(arr[1]) == "undefined")
				{
					precision = 0;
				}
				else
				{
					precision = String(arr[1]).length;
				}
				*/
				
				tween();
			}
			
			[Bindable("dataChange")]
			[Inspectable(environment="none")]
			
			/**
			 *  When a component is used as a drop-in item renderer or drop-in
			 *  item editor, Flex initializes the <code>listData</code> property
			 *  of the component with the appropriate data from the list control.
			 *  The component can then use the <code>listData</code> property
			 *  to initialize the <code>data</code> property of the drop-in
			 *  item renderer or drop-in item editor.
			 *
			 *  <p>You do not set this property in MXML or ActionScript;
			 *  Flex sets it when the component is used as a drop-in item renderer
			 *  or drop-in item editor.</p>
			 *
			 *  @default null
			 *  @see mx.controls.listClasses.IDropInListItemRenderer
			 */
			public function get listData():BaseListData
			{
			    return _listData;
			}
			
			/**
			 *  @private
			 */
			public function set listData(value:BaseListData):void
			{
			    _listData = value;
			}
			
			
			public function set unitVisible( value:Boolean ):void
			{
				if( this._unitVisible != value )
				{
					this._unitVisible = value;
					
					unitVisibleChanged = true;
					invalidateProperties();
				}
			}
			
			public function get unitVisible():Boolean
			{
				return this._unitVisible;
			}
			
			public function set unit( value:String ):void
			{
				if( this._unit != value )
				{
					this._unit = value;
					
					unitChanged = true;
					invalidateProperties();
				}
			}
			
			public function get unit():String
			{
				return this._unit;
			}
			
			public function set color( value:Number ):void
			{
				if( this._color != value )
				{
					this._color = value;
					
					colorChanged = true;
					invalidateProperties();
				}
			}
			
			public function get color():Number
			{
				return this._color;
			}
			
			public function setColor(value:Object):void
			{
				txt.setStyle("color", value);
			}
			
		]]>
	</mx:Script>
	
	<mx:NumberFormatter id="nFmt" useThousandsSeparator="true" precision="{precision}" />
	
	<mx:Label styleName="{style}" id="txt" text="" 
		paddingLeft="0" paddingRight="0"/>
		
</mx:Canvas>

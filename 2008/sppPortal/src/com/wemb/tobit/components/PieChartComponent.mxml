<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:charts="com.wemb.tobit.components.charts.*" 
	xmlns:components="com.wemb.tobit.components.*"
	width="100%" height="100%" 
	horizontalGap="10"
	horizontalAlign="center" verticalAlign="top"
	creationComplete="initComp()"
	>
	
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.collections.ArrayCollection;
			
			//-----------------------------------------------------------------
	        //
	        // Variables
	        //
	        //-----------------------------------------------------------------
			private var _dataProvider:ArrayCollection;
			
			private var dataChanged:Boolean;
			
			/**
			 * Chart Title
			 */
			private var _title:String = "";
			
			private var titleChanged:Boolean;
			
			private var _isBlackLabel:Boolean = false;
			
			private var bgTypeChanged:Boolean;
			
			/**
			 * FontSize Type
			 * 
			 * @category large, small
			 */
			private var _fontSizeType:String = "large";
			
			private var fontSizeTypeChanged:Boolean;
			
			
			[Bindable]
			public var chartW:Number = 150;
			
			[Bindable]
			public var chartH:Number = 150;
			

			//-----------------------------------------------------------------
	        //
	        // Functions
	        //
	        //-----------------------------------------------------------------
	        
	        private function initComp():void
	        {
	        	chart.y = - ( chart.height*(chart.chart.elevationAngle/100)/3 );
	        	
	        	trace(chart.width, ' / ', chart.height, chart.y );
	        }
	        
			private function displayGold(data:Object, field:String, index:Number, percentValue:Number):String
			{
	            var temp:String= (" " + percentValue).substr(0,6);
	            return data.Country + ": " + '\n' + "Total Gold: " + data.Gold + '\n' + temp + "%";
	        }
	        
	        //-----------------------------------------------------------------
	        //
	        // Override
	        //
	        //-----------------------------------------------------------------
	        override protected function commitProperties():void
	        {
	        	super.commitProperties();
	        	
	        	if( dataChanged )
	        	{
	        		dataChanged = false;
	        		
	        		//라벨
	        		labelRep.dataProvider = dataProvider;
	        		
	        		//챠트
	        		chart.dataProvider = dataProvider;
	        	}
	        	
	        	if( titleChanged )
	        	{
	        		titleChanged = false;
	        		
	        		chart.title = title;
	        	}
	        	
	        	if( bgTypeChanged )
	        	{
	        		bgTypeChanged = false;
	        		
	        		chart.isBlackLabel = isBlackLabel;
	        	}
	        	
	        	if( fontSizeTypeChanged )
				{
					fontSizeTypeChanged = false;
					
				}
	        }
	        
	        //-----------------------------------------------------------------
	        //
	        // Setter / Getter
	        //
	        //-----------------------------------------------------------------
			public function set dataProvider( value:ArrayCollection ):void
			{
				this._dataProvider = value;
				
				dataChanged = true;
				invalidateProperties();
			}
			
			[Bindable]
			public function get dataProvider():ArrayCollection
			{
				return this._dataProvider;
			}
			
			public function set title( value:String ):void
			{
				if( this._title != value )
				{
					this._title = value;
					
					titleChanged = true;
					invalidateProperties();
				}
			}
			
			public function get title():String
			{
				return this._title;
			}
			
			public function set isBlackLabel( value:Boolean ):void
			{
				if( this._isBlackLabel != value )
				{
					this._isBlackLabel = value;
					
					bgTypeChanged = true;
					invalidateProperties();
				}
			}
			
			public function get isBlackLabel():Boolean
			{
				return this._isBlackLabel;
			}
			
			[Inspectable(enumeration="small, large")]
			public function set fontSizeType( value:String ):void
			{
				if( this._fontSizeType != value )
				{
					this._fontSizeType = value;
					
					fontSizeTypeChanged = true;
					invalidateProperties();
				}
			}
			
			[Bindable]
			public function get fontSizeType():String
			{
				return this._fontSizeType;
			}
		]]>
	</mx:Script>
	
	<components:TitleCountLabelRepeater id="labelRep"
		fontSizeType="{fontSizeType}"/>
	
	<charts:CustomPieChart3D id="chart"
		width="{chartW}" height="{chartH}"/>
	
</mx:HBox>

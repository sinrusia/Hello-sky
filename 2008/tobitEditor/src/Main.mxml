<?xml version="1.0" encoding="utf-8"?>
<!--
/////////////////////////////////////////////////////////////////////////////////////////////
//	
//	Copyright (C) 2004-2012 WeMB INC. 
//	All Rights Reserved.
//	
//	@auther		 	:	wemb
//	@description 	:	
//	
/////////////////////////////////////////////////////////////////////////////////////////////
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:header="screens.header.*"
		 width="100%" height="100%"
		 creationComplete="creationCompleteHandler(event)" 
		 xmlns:containers="com.wemb.tobit.containers.*"
		 xmlns:components="com.wemb.tobit.components.*" xmlns:ns="http://wemb.co.kr/" xmlns:screens="screens.*">
	
	<fx:Metadata>
		[Style(name="backgroundImage", inherit="no", type="Class")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.wemb.puremvc.interfaces.IFacade;
			import com.wemb.puremvc.patterns.observer.Notification;
			import com.wemb.tobit.caurina.transitions.Tweener;
			import com.wemb.tobit.containers.IFrame;
			import com.wemb.tobit.core.ApplicationConfig;
			import com.wemb.tobit.core.TobitApplication;
			import com.wemb.tobit.managers.HistoryManager;
			import com.wemb.tobit.pure.ApplicationFacade;
			import com.wemb.tobit.pure.Constants;
			import com.wemb.tobit.pure.view.MainMediator;
			import com.wemb.tobit.vo.MenuInfo;
			import com.wemb.tobit.vo.PageInfo;
			import com.wemb.tobit.vo.TobitMapInfo;
			import com.wemb.tobit.vo.User;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.utils.UIDUtil;
			
			//--------------------------------------------------------
			//
			// properties
			//
			//--------------------------------------------------------
			
			// ApplicationFacade Instance
			private var facade:IFacade = ApplicationFacade.getInstance();
			
			
			//--------------------------------------------------------
			//
			// Functions
			//
			//--------------------------------------------------------
			
			/**
			 * init MainMediator
			 */
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				facade.registerMediator( new MainMediator(this) );
			}
			
			/**
			 * 메인화면 로딩시 index.mxml페이지에서 자동으로 호출하는 함수입니다.
			 * 다음과 같은초기화 작업을 수행합니다.
			 * 1. 사용자 메뉴 구성
			 * 2. 사용자 기본 페이지 로딩
			 * 3. TickList 조회
			 * 4. Background Image 적용
			 */
			public function start():void
			{
				var appConfig:ApplicationConfig = ApplicationConfig.getInstance();
				
				var user:User = TobitApplication.user;
				
				// 초기화면
				var initPageInfo:MenuInfo = null;
					
				if (user.userInitPage) 
				{
					// 설정된 초기페이지 정보 가져오기
					initPageInfo = appConfig.getMenuInfo(user.userInitPage);
				} 
				
				// 초기화면이 설정되어 있지 않으면 첫 페이지를 초기화면을 설정한다.
				if (!initPageInfo) 
				{
					// 다음은 초기 페이지를 로딩하는 프로세스로서 초기화 페이지가 설정되어 있다면 해당 페이지를 로딩하고
					// 초기화 페이지가 설정 되어있지 않다면 접근 가능한 페이지 중 첫번째 페이지를 로딩하도록 한다.
					// 권한이 없을 경우 권한 없는 녀석의 초기페이지가 로딩이 되므로 권한이 없을일이 없음
					
					for(var i:int = 0; i < appConfig.getMainMenuList().length; i++) {
						initPageInfo = appConfig.getMainMenuList().getItemAt(i) as MenuInfo;
						if (initPageInfo.readYn == "Y") {
							break;
						}
					}
				}
				
				if (initPageInfo) 
					pageChange(initPageInfo.id, initPageInfo.url, initPageInfo.type, initPageInfo.name, initPageInfo);
			}
			
			public function viewChange(toTarget:UIComponent, initInfo:Object = null):void
			{
				//현재 보여지는 페이지의 참조를 가져오도록 한다.
				var fromTarget:UIComponent = mainGroup.getChildAt(mainGroup.numElements - 1) as UIComponent;
				
				// removeMediator
				var removeFunc:Function;
				
				// registerMediator
				var registerFunc:Function
				
				// 감춰질페이지 새로운 페이지가 같지 않으면 페이지 전환 작업을 수행한다.
				if( toTarget != fromTarget )
				{
					// 감춰지는 페이지가 XCanvas일경우 Mediator을 삭제하도록 한다.
					if( fromTarget != null && fromTarget.hasOwnProperty("removeMediator") )
					{
						removeFunc = fromTarget["removeMediator"];
						removeFunc.call(fromTarget);
						
					}
					
					// 페이지 visible 설정
					// fromTarget 감추기
					// toTarget 보이기
					fromTarget.visible = false;
					fromTarget.includeInLayout = false;
					toTarget.visible = true;
					toTarget.includeInLayout = true;
					
					//각 페이지의 인덱스 값을 설정하도록 한다.
					mainGroup.setElementIndex(toTarget, mainGroup.numElements - 1);
					
					// 보여지는 페이지가 XCanvas일경우 Mediator을 등록하도록 한다.
					if( toTarget != null && toTarget.hasOwnProperty("registerMediator") )
					{
						registerFunc =  toTarget["registerMediator"];
						registerFunc.call(toTarget, initInfo);
					}
					
				}
				else
				{
					// 감춰지는 페이지가 XCanvas일경우 Mediator을 삭제하도록 한다.
					if( fromTarget != null && fromTarget.hasOwnProperty("removeMediator") )
					{
						removeFunc = fromTarget["removeMediator"];
						removeFunc.call(fromTarget);
						fromTarget.visible = false;
						fromTarget.includeInLayout = false;
					}
					
					// 보여지는 페이지가 XCanvas일경우 Mediator을 등록하도록 한다.
					if( toTarget != null && toTarget.hasOwnProperty("registerMediator") )
					{
						registerFunc =  toTarget["registerMediator"];
						registerFunc.call(toTarget, initInfo);
						toTarget.visible = true;
						toTarget.includeInLayout = true;
					}
				}
			}
			
			public function removeView():void{
				//현재 보여지는 페이지의 참조를 가져오도록 한다.
				var target:UIComponent = mainGroup.getChildAt(mainGroup.numElements - 1) as UIComponent;
				
				// 감춰지는 페이지가 XCanvas일경우 Mediator을 삭제하도록 한다.
				if( target != null && target.hasOwnProperty("removeMediator") )
				{
					var removeFunc:Function = target["removeMediator"];
					removeFunc.call(target);
				}
				
				if (target)
				{
					target.visible = false;
					target.includeInLayout = false;
				}
			}
			
			
			/**
			 * 메인화면 이동 처리
			 * 버튼 이동으로 사용하지 않는 메소드...
			 * */
			public function pageChange(menuId:String, url:String, pageType:String, menuName:String = "", initInfo:Object = null):void
			{
				
				var info:PageInfo	= new PageInfo();
				info.menuId			= menuId;
				info.url			= url;
				info.pageType		= pageType;
				info.menuName		= menuName;
				info.initInfo		= initInfo;
				facade.sendNotification(Notification.PAGE_CHANGE, info);
			}
			
			public function logoutProc():void
			{
				//현재 보여지는 페이지의 참조를 가져오도록 한다.
				if(mainGroup.numElements > 2)
				{
					var fromTarget:DisplayObject = mainGroup.getChildAt(mainGroup.numElements - 1);
					
					// 감춰지는 페이지가 XCanvas일경우 Mediator을 삭제하도록 한다.
					if( fromTarget != null && fromTarget.hasOwnProperty("removeMediator") )
					{
						var removeFunc:Function = fromTarget["removeMediator"];
						removeFunc.call(fromTarget);
					}
					
					fromTarget.visible = false;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%" height="100%">
		
		<s:Group width="100%" height="100%">
			<s:layout>
				<s:VerticalLayout paddingLeft="15" paddingRight="10" paddingTop="0" paddingBottom="20"/>
			</s:layout>
			
			<!-- 컨텐츠 영역 -->
			<s:Scroller width="100%" height="100%">
				<s:Group id="mainGroup" width="100%" height="100%">
					<s:Group id="blakPage"/>
					
					<screens:EditorScreen id="editorScreen" width="100%" height="100%" mapType="page"/>
				</s:Group>
			</s:Scroller>
		</s:Group>
	
	</s:Group>
	
</s:Group>

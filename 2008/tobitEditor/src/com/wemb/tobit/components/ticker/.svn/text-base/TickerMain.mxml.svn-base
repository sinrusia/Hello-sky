<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ticker="com.wemb.tobit.components.ticker.*" 
	width="100%" height="32" creationComplete="stop()"
	implements="mx.styles.ISimpleStyleClient" 
	>
	
	<mx:Script>
		<![CDATA[
			import com.wemb.tobit.vo.TickerInfo;
			import com.wemb.tobit.utils.Util;
			import mx.collections.ArrayCollection;
			
			import com.wemb.tobit.utils.SerializeUtil;
			import com.wemb.tobit.vo.RTMPStatus;
			
			//-----------------------------------------
			//
			// Variables
			//
			//-----------------------------------------
			private var _messages:ArrayCollection;
			
			private var _isTickerChange:Boolean;
			
			private var _status:RTMPStatus;
			
			private var statusChanged:Boolean;
			
			//-------------------------------------------------
			//
			// Override
			//
			//-------------------------------------------------
			override protected function createChildren():void
			{
				super.createChildren();
			}
			
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if( _isTickerChange )
				{
					_isTickerChange = false;
					ticker.textDataProvider = messages;
				}
				
				if( statusChanged )
				{
					statusChanged = false;
					
					if( status.status == RTMPStatus.NORMAL )
					{
						ticker.textDataProvider = messages;
					}
					else
					{
						ticker.textDataProvider = new ArrayCollection([ new TickerInfo("", status.message) ]);
					}
				}
			}
			
			
			//---------------------------------------------------
			//
			// Setter / Getter
			//
			//---------------------------------------------------
			public function set status( value:RTMPStatus ):void
			{
				if( SerializeUtil.ObjectToString(status) != SerializeUtil.ObjectToString(value) )
				{
					this._status = value;
					
					statusChanged = true;
					invalidateProperties();
				}
			}
			
			public function get status():RTMPStatus
			{
				return this._status;
			}
			
			public function set messages( value:ArrayCollection ):void
			{
				if( SerializeUtil.ObjectToString(messages) != SerializeUtil.ObjectToString(value) )
				{
					trace( "Ticker 다름 :", value );
					
					this._messages = value;
					
					_isTickerChange = true;
					invalidateProperties();
				}
				else
				{
					trace( "Ticker 같음" );
				}
			}
			
			[Bindable]
			public function get messages():ArrayCollection
			{
				return this._messages;
			}
			
			[Bindable]
			private var ticker_img:Class;

	        override public function styleChanged(styleName:String):void{
	        	super.styleChanged(styleName);
				ticker_img = Util.GetCSSResource(".ticker", "img") as Class;
	        }
	        
	        public function play():void{
	        	ticker.play();
	        }	
	        
	        public function stop():void{
	        	ticker.stop();
	        }		
		]]>
	</mx:Script>
	
	<mx:Box height="100%" paddingTop="10" >
		<mx:Image source="{ticker_img}"/>
	</mx:Box>
	
	<ticker:Ticker id="ticker" width="100%" height="100%"/>
		
</mx:HBox>

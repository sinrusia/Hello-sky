<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.wemb.tobit.components.*"
		  implements="mx.styles.ISimpleStyleClient"
		  width="100%" height="100%">
	
	<fx:Metadata>
		[Style(name="naviImage", inherit="no", type="Class")]	
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.wemb.puremvc.patterns.facade.Facade;
			import com.wemb.puremvc.patterns.observer.Notification;
			import com.wemb.tobit.caurina.transitions.Tweener;
			import com.wemb.tobit.components.buttons.MainButton;
			import com.wemb.tobit.events.MenuEvent;
			import com.wemb.tobit.pure.ApplicationFacade;
			import com.wemb.tobit.pure.Constants;
			import com.wemb.tobit.pure.view.MainMediator;
			import com.wemb.tobit.utils.Util;
			import com.wemb.tobit.vo.MenuInfo;
			import com.wemb.tobit.vo.PageInfo;
			
			import mx.collections.ArrayCollection;
			import mx.core.mx_internal;
			import mx.managers.ISystemManager;
			import mx.utils.StringUtil;
			
			//---------------------------------
			// Variables
			//----------------------------------
			private var _menuList:ArrayCollection;
			private var _isChangeMenu:Boolean = false;
			private var currentPage:PageInfo;
			private var _selected:Boolean = false;
			[Bindable] private var _visible:Boolean = false;
			private var currentMenu:MainButton;
			
			[Bindable] private var naviImage:Class;
			//---------------------------------
			// Setter / Getter
			//----------------------------------
			public function get menuList():ArrayCollection
			{
				return this._menuList;
			}
			
			public function set menuList(value:ArrayCollection):void
			{
				_menuList = value;
				_isChangeMenu = true;
				
				invalidateProperties();
			}
			
			public function get selected():Boolean
			{
				return _selected;
			}
			
			public function set selected(value:Boolean):void
			{
				_selected = value;
			}
			
			//---------------------------------
			// Override
			//----------------------------------
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if( _isChangeMenu )
				{
					_isChangeMenu = false;
					naviBtn.removeAllElements();
					
					if( _menuList )
					{
						var index:int = 0;
						
						for each(var menuInfo:MenuInfo in _menuList.source)
						{
							if (menuInfo.readYn == "Y") {
								var nb:MainButton = createButton(menuInfo, index);
								var mainMediator:MainMediator = Facade.getInstance().retrieveMediator(MainMediator.NAME) as MainMediator;
								var cp:PageInfo = mainMediator.currentPageInfo;
								
								index++;
							}
						}
					}
				}
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
		
			
			//---------------------------------
			// Function
			//----------------------------------
			public function initPageProc(menuInfo:MenuInfo):void
			{
				if(menuInfo)
				{
					if(menuInfo.children && menuInfo.children.length > 0)
					{
						lowerMenuBar.dataProvider = menuInfo.children;
					}
					
					// 메뉴 네비게이션 체크표시
					menuNavigation.reset();
					checkNavigate(menuInfo);
				}
			}
			
			private function createButton(menuInfo:MenuInfo, index:int):MainButton
			{
				var button:MainButton = new MainButton();
				
				button.id		= menuInfo.id;
				button.name		= menuInfo.id;
				button.text		= menuInfo.name;
				button.menuInfo	= menuInfo;
				button.index	= index;
				
				button.addEventListener("btnClick", btnClickHandler);
				naviBtn.addElement(button);
				
				return button;
			}
			
			private function btnClickHandler(event:Event):void
			{
				if ( currentMenu ) currentMenu.selected = false;
				currentMenu = event.currentTarget as MainButton;
				
				_visible = true;
				menuNavigation.reset();
				
				if( _selected )
				{
					MainButton(event.currentTarget).selected = false;
				}
				
				var t_arr:ArrayCollection = currentMenu.menuInfo.children as ArrayCollection;
				
				if( t_arr == null )
				{
					pageChange(currentMenu.menuInfo);
					subMenuClickEvent(null);
				}
				else
				{
					ApplicationFacade.getInstance().sendNotification(Constants.NAVI_EVENT);
					//Tweener.addTween(mask_mc,{time:0.4, y:52, transition:"easeOutQuint"});
					Tweener.addTween(subMenuBar,{time:0.4, y:43, transition:"easeOutQuint"});
					lowerMenuBar.visible = false;
					subMenuBar.menuList = t_arr;
				}
				
				// 아이템을 선택하거나 다른 영역을 선택시 사라지게 한다.
				var sm:ISystemManager =  systemManager.topLevelSystemManager;
				var sbRoot:DisplayObject = sm.getSandboxRoot();
				sbRoot.addEventListener(MouseEvent.MOUSE_DOWN, sbMouseDownHandler, false, 0, true);
				
			}
			
			private function sbMouseDownHandler(event:MouseEvent):void 
			{
				
			}
			
			
			/**
			 * 메인화면 이동 처리
			 */
			private function pageChange(menuInfo:MenuInfo):void
			{
				var info:PageInfo	= new PageInfo();
				info.menuId			= menuInfo.id;
				info.url			= menuInfo.url;
				info.pageType		= menuInfo.type;
				info.menuName		= menuInfo.name;
				info.initInfo		= menuInfo;
				
				var facade:ApplicationFacade = ApplicationFacade.getInstance();
				facade.sendNotification(Notification.PAGE_CHANGE, info);
			}
			
			private function subMenuClickEvent(e:MenuEvent):void
			{
				ApplicationFacade.getInstance().sendNotification(Constants.NAVI_CLOSE_EVENT);
				
				if( e == null )
				{
					naviClose("Y");
				}
				else
				{
					naviClose();
				}
				
				// 하위메뉴 처리
				if( e )
				{
					if( e.selectedMenu )
					{
						if (e.selectedMenu.children && e.selectedMenu.children.length > 0)
						{
							lowerMenuBar.dataProvider = e.selectedMenu.children;
						}
						else
						{
							// 선택한 메뉴가 다른 레벨이면 오른쪽 메뉴 목록을 삭제한다.
							if(!lowerMenuBar.containsMenu(e.selectedMenu)) 
							{
								lowerMenuBar.dataProvider = null;
							}
						}
						
						// 메뉴 네비게이션 체크표시
						menuNavigation.reset();
						// 선택한 메뉴가 다른 레벨이면 오른쪽 메뉴 목록을 삭제한다.
						checkNavigate(getOpenPageMenu(e.selectedMenu)); 
					}
				} else {
					lowerMenuBar.dataProvider = null;
				}
			}
			
			private function lowMenuClickEvent(event:MenuEvent):void
			{
				var menu:MenuInfo = event.selectedMenu;
				
				// 메뉴 네비게이션 체크표시
				menuNavigation.reset();
				checkNavigate(menu);
			}
			
			public function naviClose(type:String = null):void
			{
				if ( currentMenu ) 
					currentMenu.selected = false;
				
				if( _selected )
					this.selected = false;
				
				// type 이 Y 일 경우는 메뉴 중 메인을 클릭했을 경우
				if(type == "Y")
				{
					//Tweener.addTween(mask_mc,{time:0.7, y:0, transition:"easeOutQuint"});
					//Tweener.addTween(subMenu,{time:0.7, y:-10, transition:"easeOutQuint"});
					lowerMenuBar.visible = true;
				}
				else
				{
					//mask_mc.y = 0;
					//subMenu.y = -10;
					lowerMenuBar.visible = true;
				}
				
				_visible = false;
			}
			
			public function checkNavigate(selectedMenu:MenuInfo, level:int = 0, menuList:ArrayCollection = null):Boolean
			{
				if(!menuList)
					menuList = this.menuList;
				
				level++;
				
				for each(var menuInfo:MenuInfo in menuList.source)
				{
					// 선택한 메뉴와 동일한지 체크
					if( menuInfo.id == selectedMenu.id )
					{
						//선택한 메뉴로서 전달한다.
						menuNavigation.addMenuItem(level, menuInfo);
						return true;
					}
					else
					{
						if( menuInfo.children )
						{
							var result:Boolean = checkNavigate(selectedMenu, level, menuInfo.children as ArrayCollection);
							
							if(result == true)
							{
								// 선택한 메뉴로 전달한다.
								menuNavigation.addMenuItem(level, menuInfo);
								return true;
							}
						}
					}
				}
				
				return false;
			}
			
			public static function getOpenPageMenu(menuInfo:MenuInfo):MenuInfo
			{
				var url:String = StringUtil.trim(menuInfo.url);
				
				if(url == "" || url == "-")
				{
					if(menuInfo.children)
					{
						var childs:ArrayCollection = menuInfo.children as ArrayCollection;
						
						if(childs)
						{
							var childMenuInfo:MenuInfo;
							
							for each( childMenuInfo in childs.source)
							{
								childMenuInfo = getOpenPageMenu(childMenuInfo);
								
								if(childMenuInfo)
								{
									var childMenuUrl:String = StringUtil.trim(childMenuInfo.url);
									
									if(childMenuUrl != "" || childMenuUrl != "-")
									{
										return childMenuInfo;
									}
								}
							}
						}
					}
					
				}
				return menuInfo;
				
			}
			override public function styleChanged(styleProp:String):void{
				super.styleChanged(styleProp);
				naviImage = getStyle("naviImage");
			}
		]]>
	</fx:Script>
	
	<s:HGroup width="100%" verticalAlign="bottom" bottom="0" paddingLeft="25" paddingRight="25">
		<components:MenuNavigation id="menuNavigation" subMenuClickEvent="subMenuClickEvent(event)"/>
		<s:Spacer width="100%" />
		<components:LowerMenuBar id="lowerMenuBar" subMenuClickEvent="subMenuClickEvent(event)"/>
	</s:HGroup>

	<components:SubMenuBar id="subMenuBar" 
						   height="51"
						   subMenuClickEvent="subMenuClickEvent(event)"
						   skinClass="screens.skin.TobitSubMenuSkin" 
						   visible="{_visible}"
						   mask="{subMenuMask}"
						   horizontalCenter="0"/>
	
	<s:Group id="subMenuMask" width="100%" height="100%" top="49">
		<s:Rect top="0" bottom="0" right="0" left="0">
			<s:fill>
				<s:SolidColor color="#FFFFFF"/>
			</s:fill>
		</s:Rect>
	</s:Group>
	
	<s:BitmapImage id="mainMenuBg" source="{naviImage}" horizontalCenter="0"/>
	
	<s:HGroup id="naviBtn" width="100%" top="11" horizontalAlign="center" verticalAlign="middle"
			  gap="15"/>
</s:Group>

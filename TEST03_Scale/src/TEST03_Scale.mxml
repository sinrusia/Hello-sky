<?xml version="1.0" encoding="utf-8"?>
<!--
3. 보통 32bit 정수는 ARGB(투명 채널 지원) 컬러, 24bit 정수는 RGB 컬러를 표현할수 있습니다. 
RGB값이 0~255 의 범위이기 때문에 8bit 면 각 색상의 표현이 가능하기 때문입니다. 
그런데 이런 컬러 값을 그레이스케일(흑백)으로 표현하려면 색상 값을 어떻게 바꿔야 할지 pseudo 알고리즘으로 서술 혹은 
사용 가능한 언어로 구현해주세요. 

* Application 구동시 새로운 이미지를 자동으로 로딩하도록 하였습니다.
* 이미지가 로딩되는 시점에 이미지 각 픽셀의 정보를 가지고 있는 BitmapData를 imgData에 설정합니다.
* GrayScale버튼을 클릭하면 이미지의 컬러값을 크레이 스케일로 표현하는데 계산방식은 다음과같습니다.
AVG = R+G+B/3	// 해당 픽셀의 RGB값의 평균값을 구합니다.
0xAVGAVGAVG		// 구한 평균값으로 새로운 RGB값을 생성해서 해당 픽셀에 적용하면됩니다.
*그레이 스케일로 표현된 BitmapData를 이미지에 적용시키면 됩니다.

*추가적으로 Flex의 ColorTransform 클래스를 이용하여 RGBA값을 변경하여 컬러를 표현하게끔 추가하였습니다.
그냥 참고만 하시면 될거같습니다.  
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="vertical" creationComplete="initApp()">
	<mx:Style source="/asstes/css/main.css"/>
	<mx:Script>
		<![CDATA[
			import mx.controls.ColorPicker;
			
			private var imgData:BitmapData;
			
			/**
			 * Application 로딩시 초기화 함수
			 * 이미지 로딩을 시작한다.
			 */
			private function initApp():void{
				var imageLoader:Loader = new Loader();
				imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoadComplete);
				imageLoader.load(new URLRequest("F3537-11.jpg"));
			}
			
			/**
			 * 이미지 로딩이 완료됬을때 수행되는 메소드로
			 * 로딩 complete이벤트가 발생했을때 핸들링하는 함수이다.
			 */
			private function onLoadComplete(event:Event):void{
				// Source Image
				sourceImg.source = event.target.content;
				imgData = event.target.content.bitmapData;
				
				// Modify Image
				imageCopy();
			}
			
			/**
			 * 원본이미지로 복원시키는 프로세스
			 */
			private function imageCopy():void{
				var bitmap:Bitmap = new Bitmap();
				var temp:BitmapData = new BitmapData(imgData.width, imgData.height);
				temp.copyPixels(imgData, new Rectangle(0, 0, imgData.width, imgData.height), new Point(0, 0));
				bitmap.bitmapData = temp;
				modifyImg.source = bitmap;
			}
			
			/**
			 * 로딩된 이미지를 GrayScale로 표현한다.
			 */
			private function grayScale():void{
				// bitmap 오브젝트 생성
				var bitmap:Bitmap = new Bitmap();
				// 임시 BitmapData 오브젝트 생성
				var temp:BitmapData = new BitmapData(imgData.width, imgData.height);
				// 원본 BitmapData에서 픽셀정보를 복사합니다.
				temp.copyPixels(imgData, new Rectangle(0, 0, imgData.width, imgData.height), new Point(0, 0));
				
				// 픽셀정보만큼 루프문을 수행하도록 합니다.
				for(var x:int = 0; x < temp.width; x++){
					for(var y:int = 0; y < temp.height; y++){
						// 픽셀의 RGB정보를 가져옵니다. 
						var pixCol:uint	= temp.getPixel(x, y);
						// ColorTransform이라는 클래스를 이용하요 픽셀의 각각의 R.G.B값을 가져오도록 하였습니다.
						var cf:ColorTransform = new ColorTransform();
						cf.color = pixCol;
						// R.G.B값의 평균값을 구합니다.
						var thumCol:int	= (cf.redOffset+cf.greenOffset+cf.blueOffset) / 3;
						// 각각의 평균값으로 새로운 RGB값을 구하고 그 값을 픽셀에 정용합니다.
						var rgb:uint = (thumCol << 16|thumCol << 8|thumCol);
						temp.setPixel(x, y, rgb);
					}
				}
				// BitMap 오브젝트에 변경한 BitmapData를 설정합니다.
				bitmap.bitmapData = temp;
				// 새로운 BitMap데이타를 modify Image에 적용시킵니다.
				modifyImg.source = bitmap;
			}
			
			/**
			 * ColorTransform클래스를 이용 RGBA정보를 변경하여 색을 표현하도록한다.
			 */
			private function changeValie():void{
				modifyImg.transform.colorTransform = new ColorTransform(
				redMultiplier.value, 
				greenMultiplier.value, 
				blueMultiplier.value, 
				alphaMultiplier.value, 
				redOffset.value, 
				greenOffset.value, 
				blueOffset.value, 
				alphaOffset.value);
			}
			
		]]>
	</mx:Script>
	<mx:HBox id="mainbox" width="100%" height="100%">
		<!-- ColorTransform 수정 컨트롤러 -->
		<mx:VBox height="100%">
			<mx:Label text="* redMultiplier"/>
			<mx:HSlider id="redMultiplier" maximum="1" minimum="0" value="1" snapInterval="0.01" change="changeValie()" labels="[0,1]"/>
			<mx:Label text="* greenMultiplier"/>
			<mx:HSlider id="greenMultiplier" maximum="1" minimum="0" value="1" snapInterval="0.01" change="changeValie()" labels="[0,1]"/>
			<mx:Label text="* blueMultiplier"/>
			<mx:HSlider id="blueMultiplier" maximum="1" minimum="0" value="1" snapInterval="0.01" change="changeValie()" labels="[0,1]"/>
			<mx:Label text="* alphaMultiplier"/>
			<mx:HSlider id="alphaMultiplier" maximum="1" minimum="0" value="1" snapInterval="0.01" change="changeValie()" labels="[0,1]"/>
			<mx:Label text="* redOffset"/>
			<mx:HSlider id="redOffset" maximum="255" minimum="-255" value="0" snapInterval="1" change="changeValie()" labels="[-255,255]"/>
			<mx:Label text="* greenOffset"/>
			<mx:HSlider id="greenOffset" maximum="255" minimum="-255" value="0" snapInterval="1" change="changeValie()" labels="[-255,255]"/>
			<mx:Label text="* blueOffset"/>
			<mx:HSlider id="blueOffset" maximum="255" minimum="-255" value="0" snapInterval="1" change="changeValie()" labels="[-255,255]"/>
			<mx:Label text="* alphaOffset"/>
			<mx:HSlider id="alphaOffset" maximum="255" minimum="-255" value="0" snapInterval="1" change="changeValie()" labels="[-255,255]"/>
		</mx:VBox>
		<mx:Spacer width="20"/>
		<mx:VBox width="100%" horizontalAlign="center">
			<mx:HBox>
				<mx:Button click="grayScale()" label="GrayScale"/>
				<mx:Button click="imageCopy()" label="원본 복원"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<!-- 수정 이미지 -->
				<mx:VBox width="50%">
					<mx:Label text="Modify Image"/>
					<mx:Image id="modifyImg"/>
				</mx:VBox>
				
				<!-- 원본 이미지 -->
				<mx:VBox width="50%">
					<mx:Label text="Source Image"/>
					<mx:Image id="sourceImg"/>
				</mx:VBox>
			</mx:HBox>
		</mx:VBox>
		
	</mx:HBox>
</mx:Application>
